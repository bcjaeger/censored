[{"path":"https://censored.tidymodels.org/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Emil Hvitfeldt Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://censored.tidymodels.org/articles/examples.html","id":"bag_tree-models","dir":"Articles","previous_headings":"","what":"bag_tree() models","title":"Fitting and Predicting with censored","text":"\"rpart\" engine ’ll model survival lung cancer patients. can define model specific parameters: Now create model fit object: holdout data can predicted survival probability different time points well event time.","code":"library(tidymodels) ## Registered S3 method overwritten by 'tune':   ##   method                   from      ##   required_pkgs.model_spec parsnip ## ── Attaching packages ──────────────────────────────── tidymodels 0.1.4 ── ## ✔ broom        0.7.12         ✔ rsample      0.1.1        ## ✔ dials        0.1.0          ✔ tibble       3.1.6        ## ✔ dplyr        1.0.7          ✔ tidyr        1.2.0        ## ✔ infer        1.0.0          ✔ tune         0.1.6        ## ✔ modeldata    0.1.1          ✔ workflows    0.2.4        ## ✔ parsnip      0.1.7.9005     ✔ workflowsets 0.1.0        ## ✔ purrr        0.3.4          ✔ yardstick    0.0.9        ## ✔ recipes      0.1.17 ## ── Conflicts ─────────────────────────────────── tidymodels_conflicts() ──   ## ✖ purrr::discard() masks scales::discard()   ## ✖ dplyr::filter()  masks stats::filter()   ## ✖ dplyr::lag()     masks stats::lag()   ## ✖ recipes::step()  masks stats::step()   ## ✖ tune::tune()     masks parsnip::tune()   ## • Use tidymodels_prefer() to resolve common conflicts. library(censored) ## Loading required package: survival library(survival)   tidymodels_prefer()      data(cancer)      lung <- lung %>% drop_na()   lung_train <- lung[-c(1:5), ]   lung_test <- lung[1:5, ] bt_spec <-      bag_tree(cost_complexity = 0) %>%     set_engine(\"rpart\") %>%      set_mode(\"censored regression\")    bt_spec ## Bagged Decision Tree Model Specification (censored regression)   ##    ## Main Arguments:   ##   cost_complexity = 0   ##   min_n = 2   ##    ## Computational engine: rpart set.seed(1)   bt_fit <- bt_spec %>% fit(Surv(time, status) ~ ., data = lung_train)   bt_fit ## parsnip model object   ##    ##    ## Bagging survival trees with 25 bootstrap replications    ##    ## Call: bagging.data.frame(formula = Surv(time, status) ~ ., data = data) predict(     bt_fit,      lung_test,      type = \"survival\",      time = c(100, 500, 1000)   ) %>%      slice(1) %>%      tidyr::unnest(col = .pred) ## # A tibble: 3 × 2   ##   .time .pred_survival   ##   <dbl>          <dbl>   ## 1   100        0.946     ## 2   500        0.333     ## 3  1000        0.00496 predict(bt_fit, lung_test, type = \"time\") ## # A tibble: 5 × 1   ##   .pred_time   ##        <dbl>   ## 1        353   ## 2        293   ## 3        230   ## 4        201   ## 5        268"},{"path":"https://censored.tidymodels.org/articles/examples.html","id":"boost_tree-models","dir":"Articles","previous_headings":"","what":"boost_tree() models","title":"Fitting and Predicting with censored","text":"\"mboost\" engine ’ll model survival lung cancer patients. can define model specific parameters: Now create model fit object: holdout data can predicted survival probability different time points well linear predictor.","code":"library(tidymodels)   library(censored)   library(survival)   tidymodels_prefer()      data(cancer)      lung <- lung %>% drop_na()   lung_train <- lung[-c(1:5), ]   lung_test <- lung[1:5, ] bt_spec <-      boost_tree(trees = 15) %>%     set_engine(\"mboost\") %>%      set_mode(\"censored regression\")    bt_spec ## Boosted Tree Model Specification (censored regression)   ##    ## Main Arguments:   ##   trees = 15   ##    ## Computational engine: mboost set.seed(1)   bt_fit <- bt_spec %>% fit(Surv(time, status) ~ ., data = lung_train)   bt_fit ## parsnip model object   ##    ##    ##     Model-based Boosting   ##    ## Call:   ## mboost::blackboost(formula = formula, data = data, family = family,     control = mboost::boost_control(mstop = 15), tree_controls = partykit::ctree_control(teststat = \"quad\",         testtype = \"Teststatistic\", mincriterion = 0, minsplit = 10,         minbucket = 4, maxdepth = 2, saveinfo = FALSE))   ##    ##    ##     Cox Partial Likelihood    ##    ## Loss function:     ##    ## Number of boosting iterations: mstop = 15    ## Step size:  0.1    ## Offset:  0    ## Number of baselearners:  1 predict(     bt_fit,      lung_test,     type = \"survival\",     time = c(100, 500, 1000)   ) %>%      slice(1) %>%      tidyr::unnest(col = .pred) ## # A tibble: 3 × 2   ##   .time .pred_survival   ##   <dbl>          <dbl>   ## 1   100         0.867    ## 2   500         0.294    ## 3  1000         0.0441 predict(bt_fit, lung_test, type = \"linear_pred\") ## # A tibble: 5 × 1   ##   .pred_linear_pred   ##               <dbl>   ## 1            0.0823   ## 2           -0.455    ## 3            0.0661   ## 4           -0.724    ## 5           -0.724"},{"path":"https://censored.tidymodels.org/articles/examples.html","id":"decision_tree-models","dir":"Articles","previous_headings":"","what":"decision_tree() models","title":"Fitting and Predicting with censored","text":"\"rpart\" engine ’ll model survival lung cancer patients. can define model specific parameters: Now create model fit object: holdout data can predicted survival probability different time points well event time. \"party\" engine ’ll model survival lung cancer patients. can define model specific parameters: Now create model fit object: holdout data can predicted survival probability different time points well event time.","code":"library(tidymodels)   library(censored)   library(survival)   tidymodels_prefer()      data(cancer)      lung <- lung %>% drop_na()   lung_train <- lung[-c(1:5), ]   lung_test <- lung[1:5, ] dt_spec <-      decision_tree(cost_complexity = 0) %>%     set_engine(\"rpart\") %>%      set_mode(\"censored regression\")    dt_spec ## Decision Tree Model Specification (censored regression)   ##    ## Main Arguments:   ##   cost_complexity = 0   ##    ## Computational engine: rpart set.seed(1)   dt_fit <- dt_spec %>% fit(Surv(time, status) ~ ., data = lung_train)   dt_fit ## parsnip model object   ##    ## $rpart   ## n= 162    ##    ## node), split, n, deviance, yval   ##       * denotes terminal node   ##    ##   1) root 162 217.089100 1.0000000     ##     2) ph.ecog< 1.5 125 146.610800 0.8606149     ##       4) pat.karno>=65 117 134.248900 0.8042241     ##         8) sex>=1.5 47  58.371280 0.5920010     ##          16) inst>=12.5 16  17.696750 0.3469493 *   ##          17) inst< 12.5 31  36.986020 0.7601739     ##            34) ph.ecog< 0.5 14  21.869860 0.4765888 *   ##            35) ph.ecog>=0.5 17  12.197510 0.9977683 *   ##         9) sex< 1.5 70  71.035080 0.9843711     ##          18) wt.loss< -0.5 10   7.608541 0.6466464 *   ##          19) wt.loss>=-0.5 60  61.204860 1.0855380     ##            38) inst< 18.5 51  52.890560 0.9994210     ##              76) pat.karno< 85 27  30.835530 0.8204259     ##               152) age< 65.5 16  16.499450 0.6396414 *   ##               153) age>=65.5 11  12.211210 1.2318540 *   ##              77) pat.karno>=85 24  20.327560 1.2436570     ##               154) pat.karno>=95 10   6.634957 0.7568023 *   ##               155) pat.karno< 95 14  10.631990 1.6387150 *   ##            39) inst>=18.5 9   6.360874 1.6566500 *   ##       5) pat.karno< 65 8   5.011986 2.2376180 *   ##     3) ph.ecog>=1.5 37  59.992750 1.7157640     ##       6) wt.loss>=21 10  10.703230 0.6678083 *   ##       7) wt.loss< 21 27  29.918520 3.1500170     ##        14) sex>=1.5 12   7.395091 1.9066160 *   ##        15) sex< 1.5 15  16.563010 4.5917120 *   ##    ## $survfit   ##    ## Call: prodlim::prodlim(formula = form, data = data) ## Stratified Kaplan-Meier estimator for the conditional event time survival function ## Discrete predictor variable: rpartFactor (0.34694933272507, 0.47658881486553, 0.639641354557786, 0.646646427745816, 0.667808261569019, 0.756802251840104, 0.997768280401696, 1.23185367065451, 1.638714591616, 1.65664969973098, 1.90661557969861, 2.23761769770399, 4.59171172488878) ##    ## $levels   ##  [1] \"0.34694933272507\"  \"0.47658881486553\"  \"0.639641354557786\"   ##  [4] \"0.646646427745816\" \"0.667808261569019\" \"0.756802251840104\"   ##  [7] \"0.997768280401696\" \"1.23185367065451\"  \"1.638714591616\"      ## [10] \"1.65664969973098\"  \"1.90661557969861\"  \"2.23761769770399\"    ## [13] \"4.59171172488878\"    ##    ## attr(,\"class\")   ## [1] \"pecRpart\" predict(     dt_fit,      lung_test,      type = \"survival\",     time = c(100, 500, 1000)   ) %>%      slice(1) %>%      tidyr::unnest(col = .pred) ## # A tibble: 3 × 2   ##   .time .pred_survival   ##   <dbl>          <dbl>   ## 1   100          0.786   ## 2   500          0.143   ## 3  1000         NA predict(dt_fit, lung_test, type = \"time\") ## # A tibble: 5 × 1   ##   .pred_time   ##        <dbl>   ## 1       1.64   ## 2       2.24   ## 3       1.23   ## 4       1.91   ## 5       1.91 library(tidymodels)   library(censored)   library(survival)   tidymodels_prefer()      data(cancer)      lung <- lung %>% drop_na()   lung_train <- lung[-c(1:5), ]   lung_test <- lung[1:5, ] dt_spec <-      decision_tree() %>%     set_engine(\"party\") %>%      set_mode(\"censored regression\")    dt_spec ## Decision Tree Model Specification (censored regression)   ##    ## Computational engine: party set.seed(1)   dt_fit <- dt_spec %>% fit(Surv(time, status) ~ ., data = lung_train)   dt_fit ## parsnip model object   ##    ##    ##     Conditional inference tree with 4 terminal nodes   ##    ## Response:  Surv(time, status)    ## Inputs:  inst, age, sex, ph.ecog, ph.karno, pat.karno, meal.cal, wt.loss    ## Number of observations:  162    ##    ## 1) ph.ecog <= 1; criterion = 0.994, statistic = 11.294   ##   2)*  weights = 125    ## 1) ph.ecog > 1   ##   3) wt.loss <= 20; criterion = 0.962, statistic = 7.946   ##     4) sex <= 1; criterion = 0.965, statistic = 8.113   ##       5)*  weights = 15    ##     4) sex > 1   ##       6)*  weights = 12    ##   3) wt.loss > 20   ##     7)*  weights = 10 predict(     dt_fit,      lung_test,      type = \"survival\",     time = c(100, 500, 1000)   ) %>%      slice(1) %>%      tidyr::unnest(col = .pred) ## # A tibble: 3 × 2   ##   .time .pred_survival   ##   <dbl>          <dbl>   ## 1   100         0.896    ## 2   500         0.334    ## 3  1000         0.0719 predict(dt_fit, lung_test, type = \"time\") ## # A tibble: 5 × 1   ##   .pred_time   ##        <dbl>   ## 1        363   ## 2        363   ## 3        363   ## 4        201   ## 5        201"},{"path":"https://censored.tidymodels.org/articles/examples.html","id":"proportional_hazards-models","dir":"Articles","previous_headings":"","what":"proportional_hazards() models","title":"Fitting and Predicting with censored","text":"\"survival\" engine ’ll model survival lung cancer patients. can define model specific parameters: Now create model fit object: holdout data can predicted survival probability different time points well linear predictor event time. \"glmnet\" engine ’ll model survival lung cancer patients. can define model specific parameters: Now create model fit object: holdout data can predicted survival probability different time points well linear predictor.","code":"library(tidymodels)   library(censored)   library(survival)   tidymodels_prefer()      data(cancer)      lung <- lung %>% drop_na()   lung_train <- lung[-c(1:5), ]   lung_test <- lung[1:5, ] ph_spec <-      proportional_hazards() %>%     set_engine(\"survival\") %>%      set_mode(\"censored regression\")    ph_spec ## Proportional Hazards Model Specification (censored regression)   ##    ## Computational engine: survival set.seed(1)   ph_fit <- ph_spec %>% fit(Surv(time, status) ~ ., data = lung_train)   ph_fit ## parsnip model object   ##    ## Call:   ## survival::coxph(formula = Surv(time, status) ~ ., data = data,    ##     model = TRUE, x = TRUE)   ##    ##                 coef  exp(coef)   se(coef)      z       p   ## inst      -0.0291726  0.9712488  0.0131293 -2.222 0.02629   ## age        0.0146341  1.0147417  0.0119705  1.223 0.22151   ## sex       -0.5977137  0.5500678  0.2051326 -2.914 0.00357   ## ph.ecog    0.7507039  2.1184906  0.2536100  2.960 0.00308   ## ph.karno   0.0137315  1.0138262  0.0132752  1.034 0.30096   ## pat.karno -0.0082098  0.9918238  0.0082560 -0.994 0.32002   ## meal.cal  -0.0001233  0.9998767  0.0002841 -0.434 0.66435   ## wt.loss   -0.0188464  0.9813301  0.0082051 -2.297 0.02162   ##    ## Likelihood ratio test=32.61  on 8 df, p=7.224e-05   ## n= 162, number of events= 116 predict(     ph_fit,      lung_test,      type = \"survival\",     time = c(100, 500, 1000)   ) %>%      slice(1) %>%      tidyr::unnest(col = .pred) ## # A tibble: 3 × 2   ##   .time .pred_survival   ##   <dbl>          <dbl>   ## 1   100         0.903    ## 2   500         0.410    ## 3  1000         0.0953 predict(ph_fit, lung_test, type = \"linear_pred\") ## # A tibble: 5 × 1   ##   .pred_linear_pred   ##               <dbl>   ## 1            -0.373   ## 2            -1.24    ## 3            -0.852   ## 4            -1.33    ## 5            -1.11 predict(ph_fit, lung_test, type = \"time\") ## # A tibble: 5 × 1   ##   .pred_time   ##        <dbl>   ## 1       448.   ## 2       262.   ## 3       337.   ## 4       246.   ## 5       286. library(tidymodels)   library(censored)   library(survival)   tidymodels_prefer()      data(cancer)      lung <- lung %>% drop_na()   lung_train <- lung[-c(1:5), ]   lung_test <- lung[1:5, ] ph_spec <-      proportional_hazards(penalty = 0.1) %>%     set_engine(\"glmnet\") %>%      set_mode(\"censored regression\")    ph_spec ## Proportional Hazards Model Specification (censored regression)   ##    ## Main Arguments:   ##   penalty = 0.1   ##    ## Computational engine: glmnet set.seed(1)   ph_fit <- ph_spec %>% fit(Surv(time, status) ~ ., data = lung_train)   ph_fit ## parsnip model object   ##    ## Fit time:  NA    ##    ## Call:  glmnet::glmnet(x = data_obj$x, y = data_obj$y, family = \"cox\",      alpha = alpha, lambda = lambda)    ##    ##    Df %Dev   Lambda   ## 1   0 0.00 0.221000   ## 2   1 0.23 0.201400   ## 3   2 0.43 0.183500   ## 4   2 0.72 0.167200   ## 5   2 0.96 0.152300   ## 6   2 1.17 0.138800   ## 7   2 1.33 0.126500   ## 8   3 1.48 0.115200   ## 9   4 1.61 0.105000   ## 10  4 1.74 0.095660   ## 11  5 1.87 0.087160   ## 12  6 2.02 0.079420   ## 13  6 2.22 0.072370   ## 14  6 2.40 0.065940   ## 15  6 2.54 0.060080   ## 16  6 2.66 0.054740   ## 17  6 2.77 0.049880   ## 18  6 2.85 0.045450   ## 19  6 2.92 0.041410   ## 20  6 2.98 0.037730   ## 21  7 3.04 0.034380   ## 22  7 3.08 0.031330   ## 23  7 3.12 0.028540   ## 24  7 3.16 0.026010   ## 25  7 3.19 0.023700   ## 26  7 3.21 0.021590   ## 27  8 3.23 0.019670   ## 28  8 3.27 0.017930   ## 29  8 3.30 0.016330   ## 30  8 3.32 0.014880   ## 31  8 3.34 0.013560   ## 32  8 3.36 0.012360   ## 33  8 3.37 0.011260   ## 34  8 3.39 0.010260   ## 35  8 3.40 0.009346   ## 36  8 3.40 0.008516   ## 37  8 3.41 0.007760   ## 38  8 3.42 0.007070   ## 39  8 3.42 0.006442   ## 40  8 3.43 0.005870   ## 41  8 3.43 0.005348   ## 42  8 3.43 0.004873   ## 43  8 3.43 0.004440   ## 44  8 3.44 0.004046   ## 45  8 3.44 0.003686   ## 46  8 3.44 0.003359   ## 47  8 3.44 0.003061   ## 48  8 3.44 0.002789   ## 49  8 3.44 0.002541   ## 50  8 3.44 0.002315   ## The training data has been saved for prediction. predict(     ph_fit,      lung_test,      type = \"survival\",     time = c(100, 500, 1000)   ) %>%      slice(1) %>%      tidyr::unnest(col = .pred) ## # A tibble: 3 × 2   ##   .time .pred_survival   ##   <dbl>          <dbl>   ## 1   100         0.874    ## 2   500         0.349    ## 3  1000         0.0804 predict(ph_fit, lung_test, type = \"linear_pred\") ## # A tibble: 5 × 1   ##   .pred_linear_pred   ##               <dbl>   ## 1         0.272       ## 2         0.0000798   ## 3         0.00575     ## 4        -0.0211      ## 5        -0.00345"},{"path":"https://censored.tidymodels.org/articles/examples.html","id":"rand_forest-models","dir":"Articles","previous_headings":"","what":"rand_forest() models","title":"Fitting and Predicting with censored","text":"\"party\" engine ’ll model survival lung cancer patients. can define model specific parameters: Now create model fit object: holdout data can predicted survival probability different time points well event time.","code":"library(tidymodels)   library(censored)   library(survival)   tidymodels_prefer()      data(cancer)      lung <- lung %>% drop_na()   lung_train <- lung[-c(1:5), ]   lung_test <- lung[1:5, ] rf_spec <-      rand_forest(trees = 200) %>%     set_engine(\"party\") %>%      set_mode(\"censored regression\")    rf_spec ## Random Forest Model Specification (censored regression)   ##    ## Main Arguments:   ##   trees = 200   ##    ## Computational engine: party set.seed(1)   rf_fit <- rf_spec %>% fit(Surv(time, status) ~ ., data = lung_train)   rf_fit ## parsnip model object   ##    ##    ##     Random Forest using Conditional Inference Trees   ##    ## Number of trees:  200    ##    ## Response:  Surv(time, status)    ## Inputs:  inst, age, sex, ph.ecog, ph.karno, pat.karno, meal.cal, wt.loss    ## Number of observations:  162 predict(     rf_fit,      lung_test,      type = \"survival\",      time = c(100, 500, 1000)   ) %>%      slice(1) %>%      tidyr::unnest(col = .pred) ## # A tibble: 3 × 2   ##   .time .pred_survival   ##   <dbl>          <dbl>   ## 1   100         0.894    ## 2   500         0.321    ## 3  1000         0.0382 predict(rf_fit, lung_test, type = \"time\") ## # A tibble: 5 × 1   ##   .pred_time   ##        <dbl>   ## 1        348   ## 2        246   ## 3        239   ## 4        199   ## 5        212"},{"path":"https://censored.tidymodels.org/articles/examples.html","id":"survival_reg-models","dir":"Articles","previous_headings":"","what":"survival_reg() models","title":"Fitting and Predicting with censored","text":"\"survival\" engine ’ll model survival lung cancer patients. can define model specific parameters: Now create model fit object: holdout data can predicted survival probability different time points well event time, linear predictor, quantile, hazard. \"flexsurv\" engine ’ll model survival lung cancer patients. can define model specific parameters: Now create model fit object: holdout data can predicted survival probability different time points well event time, linear predictor, quantile, hazard.","code":"library(tidymodels)   library(censored)   library(survival)   tidymodels_prefer()      data(cancer)      lung <- lung %>% drop_na()   lung_train <- lung[-c(1:5), ]   lung_test <- lung[1:5, ] sr_spec <-      survival_reg(dist = \"weibull\") %>%     set_engine(\"survival\") %>%      set_mode(\"censored regression\")    sr_spec ## Parametric Survival Regression Model Specification (censored regression)   ##    ## Main Arguments:   ##   dist = weibull   ##    ## Computational engine: survival set.seed(1)   sr_fit <- sr_spec %>% fit(Surv(time, status) ~ ., data = lung_train)   sr_fit ## parsnip model object   ##    ## Call:   ## survival::survreg(formula = Surv(time, status) ~ ., data = data,    ##     dist = ~\"weibull\", model = TRUE)   ##    ## Coefficients:   ##   (Intercept)          inst           age           sex       ph.ecog    ##  6.2802499155  0.0191302849 -0.0085917372  0.4249655608 -0.5022975982    ##      ph.karno     pat.karno      meal.cal       wt.loss    ## -0.0085852225  0.0058753359  0.0001003211  0.0127001420    ##    ## Scale= 0.6902035    ##    ## Loglik(model)= -795.2   Loglik(intercept only)= -811.4   ##    Chisq= 32.41 on 8 degrees of freedom, p= 7.85e-05    ## n= 162 predict(     sr_fit,      lung_test,      type = \"survival\",     time = c(100, 500, 1000)   ) %>%      slice(1) %>%      tidyr::unnest(col = .pred) ## # A tibble: 3 × 2   ##   .time .pred_survival   ##   <dbl>          <dbl>   ## 1   100         0.912    ## 2   500         0.386    ## 3  1000         0.0742 predict(sr_fit, lung_test, type = \"time\") ## # A tibble: 5 × 1   ##   .pred_time   ##        <dbl>   ## 1       517.   ## 2       283.   ## 3       361.   ## 4       268.   ## 5       313. predict(sr_fit, lung_test, type = \"linear_pred\") ## # A tibble: 5 × 1   ##   .pred_linear_pred   ##               <dbl>   ## 1              6.25   ## 2              5.64   ## 3              5.89   ## 4              5.59   ## 5              5.75 predict(sr_fit, lung_test, type = \"quantile\") %>%      slice(1) %>%      tidyr::unnest(col = .pred) ## # A tibble: 9 × 2   ##   .quantile .pred_quantile   ##       <dbl>          <dbl>   ## 1       0.1           109.   ## 2       0.2           184.   ## 3       0.3           254.   ## 4       0.4           325.   ## 5       0.5           401.   ## 6       0.6           487.   ## 7       0.7           588.   ## 8       0.8           718.   ## 9       0.9           919. predict(sr_fit, lung_test, type = \"hazard\", time = c(100, 500, 1000)) %>%      slice(1) %>%      tidyr::unnest(col = .pred) ## # A tibble: 3 × 2   ##   .time .pred_hazard   ##   <dbl>        <dbl>   ## 1   100      0.00134   ## 2   500      0.00276   ## 3  1000      0.00377 library(tidymodels)   library(censored)   library(survival)   tidymodels_prefer()      data(cancer)      lung <- lung %>% drop_na()   lung_train <- lung[-c(1:5), ]   lung_test <- lung[1:5, ] sr_spec <-      survival_reg(dist = \"weibull\") %>%     set_engine(\"flexsurv\") %>%      set_mode(\"censored regression\")    sr_spec ## Parametric Survival Regression Model Specification (censored regression)   ##    ## Main Arguments:   ##   dist = weibull   ##    ## Computational engine: flexsurv set.seed(1)   sr_fit <- sr_spec %>%      fit(Surv(time, status) ~ age + sex + ph.ecog, data = lung_train)   sr_fit ## parsnip model object   ##    ## Call:   ## flexsurv::flexsurvreg(formula = Surv(time, status) ~ age + sex +    ##     ph.ecog, data = data, dist = ~\"weibull\")   ##    ## Estimates:    ##          data mean  est        L95%       U95%       se         exp(est)    ## shape           NA   1.39e+00   1.21e+00   1.61e+00   1.02e-01         NA   ## scale           NA   5.74e+02   1.99e+02   1.65e+03   3.10e+02         NA   ## age       6.24e+01  -9.02e-03  -2.50e-02   6.93e-03   8.14e-03   9.91e-01   ## sex       1.38e+00   4.02e-01   1.17e-01   6.87e-01   1.45e-01   1.50e+00   ## ph.ecog   9.51e-01  -3.17e-01  -5.13e-01  -1.21e-01   1.00e-01   7.28e-01   ##          L95%       U95%        ## shape           NA         NA   ## scale           NA         NA   ## age       9.75e-01   1.01e+00   ## sex       1.12e+00   1.99e+00   ## ph.ecog   5.99e-01   8.86e-01   ##    ## N = 162,  Events: 116,  Censored: 46   ## Total time at risk: 49401   ## Log-likelihood = -800.356, df = 5   ## AIC = 1610.712 predict(     sr_fit,      lung_test,      type = \"survival\",     time = c(100, 500, 1000)   ) %>%      slice(1) %>%      tidyr::unnest(col = .pred) ## # A tibble: 3 × 2   ##   .time .pred_survival   ##   <dbl>          <dbl>   ## 1   100         0.889    ## 2   500         0.330    ## 3  1000         0.0543 predict(sr_fit, lung_test, type = \"time\") ## # A tibble: 5 × 1   ##   .pred_time   ##        <dbl>   ## 1       424.   ## 2       341.   ## 3       292.   ## 4       336.   ## 5       327. predict(sr_fit, lung_test, type = \"linear_pred\") ## # A tibble: 5 × 1   ##   .pred_linear_pred   ##               <dbl>   ## 1              6.14   ## 2              5.92   ## 3              5.77   ## 4              5.91   ## 5              5.88 predict(sr_fit, lung_test, type = \"quantile\") %>%      slice(1) %>%      tidyr::unnest(col = .pred) ## # A tibble: 9 × 2   ##   .quantile .pred_quantile   ##       <dbl>          <dbl>   ## 1       0.1           92.5   ## 2       0.2          158.    ## 3       0.3          222.    ## 4       0.4          287.    ## 5       0.5          357.    ## 6       0.6          436.    ## 7       0.7          531.    ## 8       0.8          653.    ## 9       0.9          845. predict(sr_fit, lung_test, type = \"hazard\", time = c(100, 500, 1000)) %>%      slice(1) %>%      tidyr::unnest(col = .pred) ## # A tibble: 3 × 2   ##   .time .pred_hazard   ##   <dbl>        <dbl>   ## 1   100      0.00164   ## 2   500      0.00309   ## 3  1000      0.00406"},{"path":"https://censored.tidymodels.org/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Emil Hvitfeldt. Author, maintainer. Hannah Frick. Author. . Copyright holder, funder.","code":""},{"path":"https://censored.tidymodels.org/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hvitfeldt E, Frick H (2022). censored: Parsnip Engines Survival Models. R package version 0.0.0.9000, https://github.com/tidymodels/censored.","code":"@Manual{,   title = {censored: Parsnip Engines for Survival Models},   author = {Emil Hvitfeldt and Hannah Frick},   year = {2022},   note = {R package version 0.0.0.9000},   url = {https://github.com/tidymodels/censored}, }"},{"path":"https://censored.tidymodels.org/index.html","id":"censored","dir":"","previous_headings":"","what":"Parsnip Engines for Survival Models","title":"Parsnip Engines for Survival Models","text":"censored parsnip extension package provides engines various models censored regression survival analysis.","code":""},{"path":"https://censored.tidymodels.org/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Parsnip Engines for Survival Models","text":"package still development. can install development version ","code":"devtools::install_github(\"tidymodels/censored\")"},{"path":"https://censored.tidymodels.org/index.html","id":"available-models-engines-and-prediction-types","dir":"","previous_headings":"","what":"Available models, engines, and prediction types","title":"Parsnip Engines for Survival Models","text":"censored provides engines models following table. examples, please see Fitting Predicting censored. time event can predicted type = \"time\", survival probability type = \"survival\", linear predictor type = \"linear_pred\", quantiles event time distribution type = \"quantile\", hazard type = \"hazard\".","code":""},{"path":"https://censored.tidymodels.org/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Parsnip Engines for Survival Models","text":"project released Contributor Code Conduct. contributing project, agree abide terms. questions discussions tidymodels packages, modeling, machine learning, please post RStudio Community. think encountered bug, please submit issue. Either way, learn create share reprex (minimal, reproducible example), clearly communicate code. Check details contributing guidelines tidymodels packages get help.","code":""},{"path":"https://censored.tidymodels.org/reference/blackboost_train.html","id":null,"dir":"Reference","previous_headings":"","what":"Boosted trees via mboost — blackboost_train","title":"Boosted trees via mboost — blackboost_train","text":"blackboost_train wrapper blackboost() function mboost package fits tree-based models model arguments main function.","code":""},{"path":"https://censored.tidymodels.org/reference/blackboost_train.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boosted trees via mboost — blackboost_train","text":"","code":"blackboost_train(   formula,   data,   family,   weights = NULL,   teststat = \"quad\",   testtype = \"Teststatistic\",   mincriterion = 0,   minsplit = 10,   minbucket = 4,   maxdepth = 2,   saveinfo = FALSE,   ... )"},{"path":"https://censored.tidymodels.org/reference/blackboost_train.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boosted trees via mboost — blackboost_train","text":"teststat character specifying type test statistic applied variable selection. testtype character specifying compute distribution test statistic. first three options refer p-values criterion, Teststatistic uses raw statistic criterion. Bonferroni Univariate relate p-values asymptotic distribution (adjusted unadjusted). Bonferroni-adjusted Monte-Carlo p-values computed Bonferroni MonteCarlo given. mincriterion value test statistic 1 - p-value must exceeded order implement split. minsplit minimum sum weights node order considered splitting. minbucket minimum sum weights terminal node. maxdepth maximum depth tree. default maxdepth = Inf means restrictions applied tree sizes. saveinfo logical. Store information variable selection procedure info slot partynode. ... arguments pass. x data frame matrix predictors. y factor vector 2 levels","code":""},{"path":"https://censored.tidymodels.org/reference/blackboost_train.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boosted trees via mboost — blackboost_train","text":"fitted blackboost model.","code":""},{"path":"https://censored.tidymodels.org/reference/censored-package.html","id":null,"dir":"Reference","previous_headings":"","what":"censored: Parsnip Engines for Survival Models — censored-package","title":"censored: Parsnip Engines for Survival Models — censored-package","text":"censored provides engines survival models parsnip package. models include parametric survival models, proportional hazards models, decision trees, boosted trees, bagged trees, random forests. See \"Fitting Predicting censored\" article various examples. See examples classic survival models fit censored.","code":""},{"path":[]},{"path":"https://censored.tidymodels.org/reference/censored-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"censored: Parsnip Engines for Survival Models — censored-package","text":"Maintainer: Emil Hvitfeldt emilhhvitfeldt@gmail.com (ORCID) Authors: Hannah Frick hannah@rstudio.com contributors: RStudio [copyright holder, funder]","code":""},{"path":"https://censored.tidymodels.org/reference/censored-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"censored: Parsnip Engines for Survival Models — censored-package","text":"","code":"# Accelerated Failure Time (AFT) model  fit_aft <- survival_reg(dist = \"weibull\") %>%   set_engine(\"survival\") %>%   fit(Surv(time, status) ~ age + sex + ph.karno, data = lung) predict(fit_aft, lung[1:3, ], type = \"time\") #> # A tibble: 3 × 1 #>   .pred_time #>        <dbl> #> 1       355. #> 2       374. #> 3       416.   # Cox's Proportional Hazards model  fit_cox <- proportional_hazards() %>%   set_engine(\"survival\") %>%   fit(Surv(time, status) ~ age + sex + ph.karno, data = lung) predict(fit_cox, lung[1:3, ], type = \"time\") #> # A tibble: 3 × 1 #>   .pred_time #>        <dbl> #> 1       325. #> 2       343. #> 3       379.   # Andersen-Gill model for recurring events  fit_ag <- proportional_hazards() %>%   set_engine(\"survival\") %>%   fit(Surv(tstart, tstop, status) ~ treat + inherit + age + strata(hos.cat),       data = cgd) predict(fit_ag, cgd[1:3, ], type = \"time\") #> # A tibble: 3 × 1 #>   .pred_time #>        <dbl> #> 1       319. #> 2       319. #> 3       319."},{"path":"https://censored.tidymodels.org/reference/cond_inference_surv_cforest.html","id":null,"dir":"Reference","previous_headings":"","what":"A wrapper function for conditional inference forests — cond_inference_surv_cforest","title":"A wrapper function for conditional inference forests — cond_inference_surv_cforest","text":"function slightly different API party::cforest() several important arguments top-level arguments (opposed specified party::cforest_control()).","code":""},{"path":"https://censored.tidymodels.org/reference/cond_inference_surv_cforest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A wrapper function for conditional inference forests — cond_inference_surv_cforest","text":"","code":"cond_inference_surv_cforest(   formula,   data,   minsplit = 20L,   maxdepth = 0L,   teststat = \"quad\",   testtype = \"Univariate\",   mincriterion = 0,   replace = FALSE,   fraction = 0.632,   mtry = 5L,   ntree = 500L,   ... )"},{"path":"https://censored.tidymodels.org/reference/cond_inference_surv_cforest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A wrapper function for conditional inference forests — cond_inference_surv_cforest","text":"formula symbolic description model fit. Note symbols like : - work tree make use variables listed right-hand side formula. data data frame containing variables model. minsplit minimum sum weights node order considered splitting. maxdepth maximum depth tree. default maxdepth = 0 means restrictions applied tree sizes. teststat character specifying type test statistic applied. testtype character specifying compute distribution test statistic. mincriterion value test statistic (testtype == \"Teststatistic\"), 1 - p-value (values testtype) must exceeded order implement split. replace logical indicating whether sampling observations done without replacement. fraction fraction number observations draw without replacement (relevant replace = FALSE). mtry number input variables randomly sampled candidates node random forest like algorithms. default mtry = 0 means random selection takes place. ntree number trees grow forest. ... options pass party::cforest().","code":""},{"path":"https://censored.tidymodels.org/reference/cond_inference_surv_cforest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A wrapper function for conditional inference forests — cond_inference_surv_cforest","text":"object class RandomForest-class.","code":""},{"path":"https://censored.tidymodels.org/reference/cond_inference_surv_cforest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A wrapper function for conditional inference forests — cond_inference_surv_cforest","text":"Note , although party::cforest_unbiased() directly used, defaults cond_inference_forest() mirror default values. However, party::cforest_unbiased() allow several tuning parameters optimized (teststat, testtype, mincriterion, replace, fraction). set pass party::cforest_unbiased() object cond_inference_forest() modify arguments, values overwritten.","code":""},{"path":[]},{"path":"https://censored.tidymodels.org/reference/cond_inference_surv_ctree.html","id":null,"dir":"Reference","previous_headings":"","what":"A wrapper function for conditional inference trees — cond_inference_surv_ctree","title":"A wrapper function for conditional inference trees — cond_inference_surv_ctree","text":"function slightly different API party::ctree() several important arguments top-level arguments (opposed specified party::ctree_control()).","code":""},{"path":"https://censored.tidymodels.org/reference/cond_inference_surv_ctree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A wrapper function for conditional inference trees — cond_inference_surv_ctree","text":"","code":"cond_inference_surv_ctree(   formula,   data,   minsplit = 20,   maxdepth = 0,   teststat = \"quad\",   testtype = \"Bonferroni\",   mincriterion = 0.95,   ... )"},{"path":"https://censored.tidymodels.org/reference/cond_inference_surv_ctree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A wrapper function for conditional inference trees — cond_inference_surv_ctree","text":"formula symbolic description model fit. Note symbols like : - work tree make use variables listed right-hand side formula. data data frame containing variables model. minsplit minimum sum weights node order considered splitting. maxdepth maximum depth tree. default maxdepth = 0 means restrictions applied tree sizes. teststat character specifying type test statistic applied. testtype character specifying compute distribution test statistic. mincriterion value test statistic (testtype == \"Teststatistic\"), 1 - p-value (values testtype) must exceeded order implement split. ... options pass party::ctree().","code":""},{"path":"https://censored.tidymodels.org/reference/cond_inference_surv_ctree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A wrapper function for conditional inference trees — cond_inference_surv_ctree","text":"object class BinaryTree-class. library(survival) data(lung) cond_inference_surv_ctree( Surv(time, status) ~ age + sex, data = lung, maxdepth = 2, minsplit = 5 )","code":""},{"path":[]},{"path":"https://censored.tidymodels.org/reference/details_bag_tree_rpart.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensembles of CART decision trees — details_bag_tree_rpart","title":"Ensembles of CART decision trees — details_bag_tree_rpart","text":"ipred::bagging() fits ensemble decision trees, using rpart package.","code":""},{"path":"https://censored.tidymodels.org/reference/details_bag_tree_rpart.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ensembles of CART decision trees — details_bag_tree_rpart","text":"engine, single mode: censored regression","code":""},{"path":"https://censored.tidymodels.org/reference/details_bag_tree_rpart.html","id":"tuning-parameters","dir":"Reference","previous_headings":"","what":"Tuning Parameters","title":"Ensembles of CART decision trees — details_bag_tree_rpart","text":"model tuning parameters.","code":""},{"path":"https://censored.tidymodels.org/reference/details_bag_tree_rpart.html","id":"translation-from-parsnip-to-the-original-package-censored-regression-","dir":"Reference","previous_headings":"","what":"Translation from parsnip to the original package (censored regression)","title":"Ensembles of CART decision trees — details_bag_tree_rpart","text":"","code":"bag_tree(engine = \"rpart\") %>%    set_mode(\"censored regression\") %>%    translate() ## Bagged Decision Tree Model Specification (censored regression) ##  ## Main Arguments: ##   cost_complexity = 0 ##   min_n = 2 ##  ## Computational engine: rpart  ##  ## Model fit template: ## ipred::bagging(formula = missing_arg(), data = missing_arg())"},{"path":"https://censored.tidymodels.org/reference/details_bag_tree_rpart.html","id":"preprocessing-requirements","dir":"Reference","previous_headings":"","what":"Preprocessing requirements","title":"Ensembles of CART decision trees — details_bag_tree_rpart","text":"engine require special encoding predictors. Categorical predictors can partitioned groups factor levels (e.g. {, c} vs {b, d}) splitting node. Dummy variables required model.","code":""},{"path":"https://censored.tidymodels.org/reference/details_bag_tree_rpart.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Ensembles of CART decision trees — details_bag_tree_rpart","text":"Breiman L. 1996. “Bagging predictors”. Machine Learning. 24 (2): 123-140 Hothorn T, Lausen B, Benner , Radespiel-Troeger M. 2004. Bagging Survival Trees. Statistics Medicine, 23(1), 77–91. Kuhn, M, K Johnson. 2013. Applied Predictive Modeling. Springer.","code":""},{"path":"https://censored.tidymodels.org/reference/details_boost_tree_mboost.html","id":null,"dir":"Reference","previous_headings":"","what":"Boosted trees — details_boost_tree_mboost","title":"Boosted trees — details_boost_tree_mboost","text":"mboost::blackboost() fits series decision trees forming ensemble. tree depends results previous trees. trees ensemble combined produce final prediction.","code":""},{"path":"https://censored.tidymodels.org/reference/details_boost_tree_mboost.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Boosted trees — details_boost_tree_mboost","text":"engine, single mode: censored regression","code":""},{"path":"https://censored.tidymodels.org/reference/details_boost_tree_mboost.html","id":"tuning-parameters","dir":"Reference","previous_headings":"","what":"Tuning Parameters","title":"Boosted trees — details_boost_tree_mboost","text":"model 5 tuning parameters: mtry: # Randomly Selected Predictors (type: integer, default: see ) trees: # Trees (type: integer, default: 100L) tree_depth: Tree Depth (type: integer, default: 2L) min_n: Minimal Node Size (type: integer, default: 10L) loss_reduction: Minimum Loss Reduction (type: double, default: 0) mtry parameter related number predictors. default use predictors.","code":""},{"path":"https://censored.tidymodels.org/reference/details_boost_tree_mboost.html","id":"translation-from-parsnip-to-the-original-package-censored-regression-","dir":"Reference","previous_headings":"","what":"Translation from parsnip to the original package (censored regression)","title":"Boosted trees — details_boost_tree_mboost","text":"blackboost_train() wrapper around mboost::blackboost() (functions) makes easier run model.","code":"boost_tree() %>%    set_engine(\"mboost\") %>%    set_mode(\"censored regression\") %>%    translate() ## Boosted Tree Model Specification (censored regression) ##  ## Computational engine: mboost  ##  ## Model fit template: ## censored::blackboost_train(formula = missing_arg(), data = missing_arg(),  ##     family = mboost::CoxPH())"},{"path":"https://censored.tidymodels.org/reference/details_boost_tree_mboost.html","id":"preprocessing-requirements","dir":"Reference","previous_headings":"","what":"Preprocessing requirements","title":"Boosted trees — details_boost_tree_mboost","text":"engine require special encoding predictors. Categorical predictors can partitioned groups factor levels (e.g. {, c} vs {b, d}) splitting node. Dummy variables required model.","code":""},{"path":"https://censored.tidymodels.org/reference/details_boost_tree_mboost.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Boosted trees — details_boost_tree_mboost","text":"Buehlmann P, Hothorn T. 2007. Boosting algorithms: regularization, prediction model fitting. Statistical Science, 22(4), 477–505. Kuhn, M, K Johnson. 2013. Applied Predictive Modeling. Springer.","code":""},{"path":"https://censored.tidymodels.org/reference/details_decision_tree_party.html","id":null,"dir":"Reference","previous_headings":"","what":"Decision trees via party — details_decision_tree_party","title":"Decision trees via party — details_decision_tree_party","text":"party::ctree() fits model set /statements creates tree-based structure using hypothesis testing methods.","code":""},{"path":"https://censored.tidymodels.org/reference/details_decision_tree_party.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Decision trees via party — details_decision_tree_party","text":"engine, single mode: censored regression","code":""},{"path":"https://censored.tidymodels.org/reference/details_decision_tree_party.html","id":"tuning-parameters","dir":"Reference","previous_headings":"","what":"Tuning Parameters","title":"Decision trees via party — details_decision_tree_party","text":"model 2 tuning parameters: tree_depth: Tree Depth (type: integer, default: see ) min_n: Minimal Node Size (type: integer, default: 20L) tree_depth parameter defaults 0 means restrictions applied tree depth. engine specific parameter model : mtry: number predictors, selected random, evaluated splitting. default use predictors.","code":""},{"path":"https://censored.tidymodels.org/reference/details_decision_tree_party.html","id":"translation-from-parsnip-to-the-original-package-censored-regression-","dir":"Reference","previous_headings":"","what":"Translation from parsnip to the original package (censored regression)","title":"Decision trees via party — details_decision_tree_party","text":"cond_inference_surv_ctree() wrapper around party::ctree() (functions) makes easier run model.","code":"decision_tree(tree_depth = integer(1), min_n = integer(1)) %>%    set_engine(\"party\") %>%    set_mode(\"censored regression\") %>%    translate() ## Decision Tree Model Specification (censored regression) ##  ## Main Arguments: ##   tree_depth = integer(1) ##   min_n = integer(1) ##  ## Computational engine: party  ##  ## Model fit template: ## censored::cond_inference_surv_ctree(formula = missing_arg(),  ##     data = missing_arg(), maxdepth = integer(1), minsplit = min_rows(0L,  ##         data))"},{"path":"https://censored.tidymodels.org/reference/details_decision_tree_party.html","id":"preprocessing-requirements","dir":"Reference","previous_headings":"","what":"Preprocessing requirements","title":"Decision trees via party — details_decision_tree_party","text":"engine require special encoding predictors. Categorical predictors can partitioned groups factor levels (e.g. {, c} vs {b, d}) splitting node. Dummy variables required model.","code":""},{"path":"https://censored.tidymodels.org/reference/details_decision_tree_party.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Decision trees via party — details_decision_tree_party","text":"Hothorn T, Hornik K, Zeileis . 2006. Unbiased Recursive Partitioning: Conditional Inference Framework. Journal Computational Graphical Statistics, 15(3), 651–674. Kuhn, M, K Johnson. 2013. Applied Predictive Modeling. Springer.","code":""},{"path":"https://censored.tidymodels.org/reference/details_proportional_hazards_glmnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Proportional hazards regression — details_proportional_hazards_glmnet","title":"Proportional hazards regression — details_proportional_hazards_glmnet","text":"glmnet::glmnet() fits regularized Cox proportional hazards model.","code":""},{"path":"https://censored.tidymodels.org/reference/details_proportional_hazards_glmnet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Proportional hazards regression — details_proportional_hazards_glmnet","text":"engine, single mode: censored regression","code":""},{"path":"https://censored.tidymodels.org/reference/details_proportional_hazards_glmnet.html","id":"tuning-parameters","dir":"Reference","previous_headings":"","what":"Tuning Parameters","title":"Proportional hazards regression — details_proportional_hazards_glmnet","text":"model 2 tuning parameters: penalty: Amount Regularization (type: double, default: see ) mixture: Proportion Lasso Penalty (type: double, default: 1.0) value mixture = 1 corresponds pure lasso model, mixture = 0 indicates ridge regression. penalty parameter default requires single numeric value. details , glmnet model general, see parsnip::glmnet-details.","code":""},{"path":"https://censored.tidymodels.org/reference/details_proportional_hazards_glmnet.html","id":"translation-from-parsnip-to-the-original-package","dir":"Reference","previous_headings":"","what":"Translation from parsnip to the original package","title":"Proportional hazards regression — details_proportional_hazards_glmnet","text":"","code":"proportional_hazards(penalty = double(1), mixture = double(1)) %>%    set_engine(\"glmnet\") %>%    translate() ## Proportional Hazards Model Specification (censored regression) ##  ## Main Arguments: ##   penalty = 0 ##   mixture = double(1) ##  ## Computational engine: glmnet  ##  ## Model fit template: ## censored::glmnet_fit_wrapper(formula = missing_arg(), data = missing_arg(),  ##     family = missing_arg(), alpha = double(1))"},{"path":"https://censored.tidymodels.org/reference/details_proportional_hazards_glmnet.html","id":"preprocessing-requirements","dir":"Reference","previous_headings":"","what":"Preprocessing requirements","title":"Proportional hazards regression — details_proportional_hazards_glmnet","text":"Factor/categorical predictors need converted numeric values (e.g., dummy indicator variables) engine. using formula method via fit.model_spec(), parsnip convert factor columns indicators. Predictors scale. One way achieve center scale predictor mean zero variance one. default, glmnet::glmnet() uses argument standardize = TRUE center scale data.","code":""},{"path":"https://censored.tidymodels.org/reference/details_proportional_hazards_glmnet.html","id":"other-details","dir":"Reference","previous_headings":"","what":"Other details","title":"Proportional hazards regression — details_proportional_hazards_glmnet","text":"model fit intercept. glmnet::glmnet() use formula interface , consistency, package requires model formula. model formula can include special terms, survival::strata(). allows baseline hazard differ groups contained function. column used inside strata() treated qualitative matter type. different syntax offered glmnet::glmnet() package (.e., glmnet::stratifySurv()) mot recommended . example, model, numeric column rx used estimate two different baseline hazards value column:  Note columns used strata() function also estimated regular portion model (.e., within linear predictor).","code":"library(survival) library(censored) library(dplyr) library(tidyr)  mod <-    proportional_hazards(penalty = 0.01) %>%    set_engine(\"glmnet\", nlambda = 5) %>%    fit(Surv(futime, fustat) ~ age + ecog.ps + strata(rx), data = ovarian)  pred_data <- data.frame(age = c(50, 50), ecog.ps = c(1, 1), rx = c(1, 2))  # Different survival probabilities for different values of 'rx' predict(mod, pred_data, type = \"survival\", time = 500) %>%    bind_cols(pred_data) %>%    unnest(.pred) ## # A tibble: 2 × 5 ##   .time .pred_survival   age ecog.ps    rx ##   <dbl>          <dbl> <dbl>   <dbl> <dbl> ## 1   500          0.666    50       1     1 ## 2   500          0.769    50       1     2"},{"path":"https://censored.tidymodels.org/reference/details_proportional_hazards_glmnet.html","id":"linear-predictor-values","dir":"Reference","previous_headings":"","what":"Linear predictor values","title":"Proportional hazards regression — details_proportional_hazards_glmnet","text":"Since risk regression parametric survival models modeling different characteristics (e.g. relative hazard versus event time), linear predictors going opposite directions. example, parametric models, linear predictor increases time. proportional hazards models linear predictor decreases time (since hazard increasing). , linear predictors two quantities opposite signs. tidymodels treat different models differently computing performance metrics. standardize across model types, default proportional hazards models increasing values time. result, sign linear predictor opposite value produced predict() method package. behavior can changed using increasing argument calling predict() model object.","code":""},{"path":"https://censored.tidymodels.org/reference/details_proportional_hazards_glmnet.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Proportional hazards regression — details_proportional_hazards_glmnet","text":"Simon N, Friedman J, Hastie T, Tibshirani R. 2011. “Regularization Paths Cox’s Proportional Hazards Model via Coordinate Descent.” Journal Statistical Software, Articles 39 (5): 1–13. . Hastie T, Tibshirani R, Wainwright M. 2015. Statistical Learning Sparsity. CRC Press. Kuhn M, Johnson K. 2013. Applied Predictive Modeling. Springer.","code":""},{"path":"https://censored.tidymodels.org/reference/details_proportional_hazards_survival.html","id":null,"dir":"Reference","previous_headings":"","what":"Proportional hazards regression — details_proportional_hazards_survival","title":"Proportional hazards regression — details_proportional_hazards_survival","text":"survival::coxph() fits Cox proportional hazards model.","code":""},{"path":"https://censored.tidymodels.org/reference/details_proportional_hazards_survival.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Proportional hazards regression — details_proportional_hazards_survival","text":"engine, single mode: censored regression","code":""},{"path":"https://censored.tidymodels.org/reference/details_proportional_hazards_survival.html","id":"tuning-parameters","dir":"Reference","previous_headings":"","what":"Tuning Parameters","title":"Proportional hazards regression — details_proportional_hazards_survival","text":"model tuning parameters.","code":""},{"path":"https://censored.tidymodels.org/reference/details_proportional_hazards_survival.html","id":"translation-from-parsnip-to-the-original-package","dir":"Reference","previous_headings":"","what":"Translation from parsnip to the original package","title":"Proportional hazards regression — details_proportional_hazards_survival","text":"","code":"proportional_hazards() %>%    set_engine(\"survival\") %>%    set_mode(\"censored regression\") %>%    translate() ## Proportional Hazards Model Specification (censored regression) ##  ## Computational engine: survival  ##  ## Model fit template: ## survival::coxph(formula = missing_arg(), data = missing_arg(),  ##     x = TRUE, model = TRUE)"},{"path":"https://censored.tidymodels.org/reference/details_proportional_hazards_survival.html","id":"other-details","dir":"Reference","previous_headings":"","what":"Other details","title":"Proportional hazards regression — details_proportional_hazards_survival","text":"model fit intercept. main interface model uses formula method since model specification typically involved use survival::Surv(). model formula can include special terms, survival::strata(). allows baseline hazard differ groups contained function. column used inside strata() treated qualitative matter type. example, model, numeric column rx used estimate two different baseline hazards value column:  Note columns used strata() function estimated regular portion model (.e., within linear predictor).","code":"library(survival)  proportional_hazards() %>%    fit(Surv(futime, fustat) ~ age + strata(rx), data = ovarian) %>%    extract_fit_engine() %>%    # Two different hazards for each value of 'rx'   basehaz() ##        hazard time strata ## 1  0.02250134   59   rx=1 ## 2  0.05088586  115   rx=1 ## 3  0.09467873  156   rx=1 ## 4  0.14809975  268   rx=1 ## 5  0.30670509  329   rx=1 ## 6  0.46962698  431   rx=1 ## 7  0.46962698  448   rx=1 ## 8  0.46962698  477   rx=1 ## 9  1.07680229  638   rx=1 ## 10 1.07680229  803   rx=1 ## 11 1.07680229  855   rx=1 ## 12 1.07680229 1040   rx=1 ## 13 1.07680229 1106   rx=1 ## 14 0.05843331  353   rx=2 ## 15 0.12750063  365   rx=2 ## 16 0.12750063  377   rx=2 ## 17 0.12750063  421   rx=2 ## 18 0.23449656  464   rx=2 ## 19 0.35593895  475   rx=2 ## 20 0.50804209  563   rx=2 ## 21 0.50804209  744   rx=2 ## 22 0.50804209  769   rx=2 ## 23 0.50804209  770   rx=2 ## 24 0.50804209 1129   rx=2 ## 25 0.50804209 1206   rx=2 ## 26 0.50804209 1227   rx=2"},{"path":"https://censored.tidymodels.org/reference/details_proportional_hazards_survival.html","id":"linear-predictor-values","dir":"Reference","previous_headings":"","what":"Linear predictor values","title":"Proportional hazards regression — details_proportional_hazards_survival","text":"Since risk regression parametric survival models modeling different characteristics (e.g. relative hazard versus event time), linear predictors going opposite directions. example, parametric models, linear predictor increases time. proportional hazards models linear predictor decreases time (since hazard increasing). , linear predictors two quantities opposite signs. tidymodels treat different models differently computing performance metrics. standardize across model types, default proportional hazards models increasing values time. result, sign linear predictor opposite value produced predict() method package. behavior can changed using increasing argument calling predict() model object.","code":""},{"path":"https://censored.tidymodels.org/reference/details_proportional_hazards_survival.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Proportional hazards regression — details_proportional_hazards_survival","text":"Andersen P, Gill R. 1982. Cox’s regression model counting processes, large sample study. Annals Statistics 10, 1100-1120.","code":""},{"path":"https://censored.tidymodels.org/reference/details_rand_forest_party.html","id":null,"dir":"Reference","previous_headings":"","what":"Random forests via party — details_rand_forest_party","title":"Random forests via party — details_rand_forest_party","text":"party::cforest() fits model creates large number decision trees, independent others. final prediction uses predictions individual trees combines .","code":""},{"path":"https://censored.tidymodels.org/reference/details_rand_forest_party.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random forests via party — details_rand_forest_party","text":"engine, single mode: censored regression","code":""},{"path":"https://censored.tidymodels.org/reference/details_rand_forest_party.html","id":"tuning-parameters","dir":"Reference","previous_headings":"","what":"Tuning Parameters","title":"Random forests via party — details_rand_forest_party","text":"model 3 tuning parameters: trees: # Trees (type: integer, default: 500L) min_n: Minimal Node Size (type: integer, default: 20L) mtry: # Randomly Selected Predictors (type: integer, default: 5L)","code":""},{"path":"https://censored.tidymodels.org/reference/details_rand_forest_party.html","id":"translation-from-parsnip-to-the-original-package-censored-regression-","dir":"Reference","previous_headings":"","what":"Translation from parsnip to the original package (censored regression)","title":"Random forests via party — details_rand_forest_party","text":"cond_inference_surv_cforest() wrapper around party::cforest() (functions) makes easier run model.","code":"rand_forest() %>%    set_engine(\"party\") %>%    set_mode(\"censored regression\") %>%    translate() ## Random Forest Model Specification (censored regression) ##  ## Computational engine: party  ##  ## Model fit template: ## censored::cond_inference_surv_cforest(formula = missing_arg(),  ##     data = missing_arg())"},{"path":"https://censored.tidymodels.org/reference/details_rand_forest_party.html","id":"preprocessing-requirements","dir":"Reference","previous_headings":"","what":"Preprocessing requirements","title":"Random forests via party — details_rand_forest_party","text":"engine require special encoding predictors. Categorical predictors can partitioned groups factor levels (e.g. {, c} vs {b, d}) splitting node. Dummy variables required model.","code":""},{"path":"https://censored.tidymodels.org/reference/details_rand_forest_party.html","id":"other-details","dir":"Reference","previous_headings":"","what":"Other details","title":"Random forests via party — details_rand_forest_party","text":"main interface model uses formula method since model specification typically involved use survival::Surv().","code":""},{"path":"https://censored.tidymodels.org/reference/details_rand_forest_party.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Random forests via party — details_rand_forest_party","text":"Hothorn T, Buhlmann P, Dudoit S, Molinaro , Van der Laan MJ. 2006. Survival Ensembles. Biostatistics, 7(3), 355–373. Kuhn, M, K Johnson. 2013. Applied Predictive Modeling. Springer.","code":""},{"path":"https://censored.tidymodels.org/reference/details_survival_reg_flexsurv.html","id":null,"dir":"Reference","previous_headings":"","what":"Parametric survival regression — details_survival_reg_flexsurv","title":"Parametric survival regression — details_survival_reg_flexsurv","text":"flexsurv::flexsurvreg() fits parametric survival model.","code":""},{"path":"https://censored.tidymodels.org/reference/details_survival_reg_flexsurv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parametric survival regression — details_survival_reg_flexsurv","text":"engine, single mode: censored regression","code":""},{"path":"https://censored.tidymodels.org/reference/details_survival_reg_flexsurv.html","id":"tuning-parameters","dir":"Reference","previous_headings":"","what":"Tuning Parameters","title":"Parametric survival regression — details_survival_reg_flexsurv","text":"model 1 tuning parameters: dist: Distribution (type: character, default: ‘weibull’)","code":""},{"path":"https://censored.tidymodels.org/reference/details_survival_reg_flexsurv.html","id":"translation-from-parsnip-to-the-original-package","dir":"Reference","previous_headings":"","what":"Translation from parsnip to the original package","title":"Parametric survival regression — details_survival_reg_flexsurv","text":"","code":"survival_reg(dist = character(1)) %>%    set_engine(\"flexsurv\") %>%    set_mode(\"censored regression\") %>%    translate() ## Parametric Survival Regression Model Specification (censored regression) ##  ## Main Arguments: ##   dist = character(1) ##  ## Computational engine: flexsurv  ##  ## Model fit template: ## flexsurv::flexsurvreg(formula = missing_arg(), data = missing_arg(),  ##     weights = missing_arg(), dist = character(1))"},{"path":"https://censored.tidymodels.org/reference/details_survival_reg_flexsurv.html","id":"other-details","dir":"Reference","previous_headings":"","what":"Other details","title":"Parametric survival regression — details_survival_reg_flexsurv","text":"main interface model uses formula method since model specification typically involved use survival::Surv(). engine, stratification specified via strata(), please see documentation flexsurv package alternative specifications. predictions type \"linear_pred\", linear predictor returned without exponentiated (different flexsurv returns).","code":""},{"path":"https://censored.tidymodels.org/reference/details_survival_reg_flexsurv.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Parametric survival regression — details_survival_reg_flexsurv","text":"Jackson, C. 2016. flexsurv: Platform Parametric Survival Modeling R. Journal Statistical Software, 70(8), 1 - 33.","code":""},{"path":"https://censored.tidymodels.org/reference/details_survival_reg_survival.html","id":null,"dir":"Reference","previous_headings":"","what":"Parametric survival regression — details_survival_reg_survival","title":"Parametric survival regression — details_survival_reg_survival","text":"survival::survreg() fits parametric survival model.","code":""},{"path":"https://censored.tidymodels.org/reference/details_survival_reg_survival.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parametric survival regression — details_survival_reg_survival","text":"engine, single mode: censored regression","code":""},{"path":"https://censored.tidymodels.org/reference/details_survival_reg_survival.html","id":"tuning-parameters","dir":"Reference","previous_headings":"","what":"Tuning Parameters","title":"Parametric survival regression — details_survival_reg_survival","text":"model 1 tuning parameters: dist: Distribution (type: character, default: ‘weibull’)","code":""},{"path":"https://censored.tidymodels.org/reference/details_survival_reg_survival.html","id":"translation-from-parsnip-to-the-original-package","dir":"Reference","previous_headings":"","what":"Translation from parsnip to the original package","title":"Parametric survival regression — details_survival_reg_survival","text":"","code":"survival_reg(dist = character(1)) %>%    set_engine(\"survival\") %>%    set_mode(\"censored regression\") %>%    translate() ## Parametric Survival Regression Model Specification (censored regression) ##  ## Main Arguments: ##   dist = character(1) ##  ## Computational engine: survival  ##  ## Model fit template: ## survival::survreg(formula = missing_arg(), data = missing_arg(),  ##     weights = missing_arg(), dist = character(1), model = TRUE)"},{"path":"https://censored.tidymodels.org/reference/details_survival_reg_survival.html","id":"other-details","dir":"Reference","previous_headings":"","what":"Other details","title":"Parametric survival regression — details_survival_reg_survival","text":"Note model = TRUE needed produce quantile predictions stratification variable can overridden cases. main interface model uses formula method since model specification typically involved use survival::Surv(). model formula can include special terms, survival::strata(). allows model scale parameter differ groups contained function. column used inside strata() treated qualitative matter type. example, model, numeric column rx used estimate two different scale parameters value column:","code":"library(survival)  survival_reg() %>%    fit(Surv(futime, fustat) ~ age + strata(rx), data = ovarian) %>%    extract_fit_engine() ## Call: ## survival::survreg(formula = Surv(futime, fustat) ~ age + strata(rx),  ##     data = data, model = TRUE) ##  ## Coefficients: ## (Intercept)         age  ##  12.8734120  -0.1033569  ##  ## Scale: ##      rx=1      rx=2  ## 0.7695509 0.4703602  ##  ## Loglik(model)= -89.4   Loglik(intercept only)= -97.1 ##  Chisq= 15.36 on 1 degrees of freedom, p= 8.88e-05  ## n= 26"},{"path":"https://censored.tidymodels.org/reference/details_survival_reg_survival.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Parametric survival regression — details_survival_reg_survival","text":"Kalbfleisch, J. D. Prentice, R. L. 2002 statistical analysis failure time data, Wiley.","code":""},{"path":"https://censored.tidymodels.org/reference/flexsurv_probs.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function helps for parametric survival models — flexsurv_probs","title":"Internal function helps for parametric survival models — flexsurv_probs","text":"Internal function helps parametric survival models","code":""},{"path":"https://censored.tidymodels.org/reference/flexsurv_probs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function helps for parametric survival models — flexsurv_probs","text":"","code":"flexsurv_probs(object, new_data, time, type = \"survival\")  survreg_survival_probs(object, new_data, time)  survreg_hazard_probs(object, new_data, time)"},{"path":"https://censored.tidymodels.org/reference/flexsurv_probs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function helps for parametric survival models — flexsurv_probs","text":"object survreg flexsurvreg object. new_data data frame. time vector time points","code":""},{"path":"https://censored.tidymodels.org/reference/flexsurv_probs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function helps for parametric survival models — flexsurv_probs","text":"nested tibble column name .pred","code":""},{"path":"https://censored.tidymodels.org/reference/glmnet_fit_wrapper.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper for glmnet for censored — glmnet_fit_wrapper","title":"Wrapper for glmnet for censored — glmnet_fit_wrapper","text":"used directly users.","code":""},{"path":"https://censored.tidymodels.org/reference/glmnet_fit_wrapper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper for glmnet for censored — glmnet_fit_wrapper","text":"","code":"glmnet_fit_wrapper(formula, data, alpha = 1, lambda = NULL, ...)"},{"path":"https://censored.tidymodels.org/reference/glmnet_fit_wrapper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper for glmnet for censored — glmnet_fit_wrapper","text":"formula model formula. data data. alpha elasticnet mixing parameter, \\(0\\le\\alpha\\le 1\\). penalty defined $$(1-\\alpha)/2||\\beta||_2^2+\\alpha||\\beta||_1.$$ alpha=1 lasso penalty, alpha=0 ridge penalty. lambda user supplied lambda sequence. Typical usage program compute lambda sequence based nlambda lambda.min.ratio. Supplying value lambda overrides . WARNING: use care. Avoid supplying single value lambda (predictions CV use predict() instead).  Supply instead decreasing sequence lambda values. glmnet relies warms starts speed, often faster fit whole path compute single fit. ... additional parameters passed glmnet::glmnet.","code":""},{"path":"https://censored.tidymodels.org/reference/glmnet_fit_wrapper.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Wrapper for glmnet for censored — glmnet_fit_wrapper","text":"wrapper translates formula interface glmnet's matrix due stratification can specified. glmnet requires response stratified via glmnet::stratifySurv(). censored allows specification via survival::strata() term right-hand side formula. formula used generate stratification information needed stratifying response. formula without strata term used generating model matrix glmnet. wrapper retains original formula pre-processing elements including training data allow predictions fitted model.","code":""},{"path":"https://censored.tidymodels.org/reference/party_internal.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal helper functions for party objects — survival_prob_ctree","title":"Internal helper functions for party objects — survival_prob_ctree","text":"Internal helper functions party objects","code":""},{"path":"https://censored.tidymodels.org/reference/party_internal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal helper functions for party objects — survival_prob_ctree","text":"","code":"survival_prob_ctree(object, new_data, time, output = \"surv\")  survival_prob_cforest(object, new_data, time, output = \"surv\")"},{"path":"https://censored.tidymodels.org/reference/party_internal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal helper functions for party objects — survival_prob_ctree","text":"object model object new_data data frame predicted. time vector times predict survival probability. output Type output.","code":""},{"path":"https://censored.tidymodels.org/reference/party_internal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal helper functions for party objects — survival_prob_ctree","text":"tibble list column nested tibbles.","code":""},{"path":"https://censored.tidymodels.org/reference/quantiles_flexsurvreg.html","id":null,"dir":"Reference","previous_headings":"","what":"Developer tools for flexsurv objects — quantiles_flexsurvreg","title":"Developer tools for flexsurv objects — quantiles_flexsurvreg","text":"Developer tools flexsurv objects","code":""},{"path":"https://censored.tidymodels.org/reference/quantiles_flexsurvreg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Developer tools for flexsurv objects — quantiles_flexsurvreg","text":"","code":"quantiles_flexsurvreg(   object,   new_data,   ...,   quantile = (1:9)/10,   interval = \"none\",   level = 0.95 )"},{"path":"https://censored.tidymodels.org/reference/quantiles_flexsurvreg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Developer tools for flexsurv objects — quantiles_flexsurvreg","text":"object model object. new_data Data prediction. ... Currently used. quantile Vector quantiles. interval confidence interval added? One \"none\" \"confidence\". level Confidence level.","code":""},{"path":"https://censored.tidymodels.org/reference/quantiles_flexsurvreg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Developer tools for flexsurv objects — quantiles_flexsurvreg","text":"nested tibble.","code":""},{"path":"https://censored.tidymodels.org/reference/survival_prob_coxnet.html","id":null,"dir":"Reference","previous_headings":"","what":"A wrapper for survival probabilities with coxnet models — survival_prob_coxnet","title":"A wrapper for survival probabilities with coxnet models — survival_prob_coxnet","text":"wrapper survival probabilities coxnet models","code":""},{"path":"https://censored.tidymodels.org/reference/survival_prob_coxnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A wrapper for survival probabilities with coxnet models — survival_prob_coxnet","text":"","code":"survival_prob_coxnet(   object,   new_data,   times,   output = \"surv\",   penalty = NULL,   ... )"},{"path":"https://censored.tidymodels.org/reference/survival_prob_coxnet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A wrapper for survival probabilities with coxnet models — survival_prob_coxnet","text":"object fitted _coxnet object. new_data Data prediction. times vector integers prediction times. output One \"surv\" \"haz\". ... Options pass survival::survfit().","code":""},{"path":"https://censored.tidymodels.org/reference/survival_prob_coxnet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A wrapper for survival probabilities with coxnet models — survival_prob_coxnet","text":"nested tibble.","code":""},{"path":"https://censored.tidymodels.org/reference/survival_prob_cph.html","id":null,"dir":"Reference","previous_headings":"","what":"A wrapper for survival probabilities with cph models — survival_prob_cph","title":"A wrapper for survival probabilities with cph models — survival_prob_cph","text":"wrapper survival probabilities cph models","code":""},{"path":"https://censored.tidymodels.org/reference/survival_prob_cph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A wrapper for survival probabilities with cph models — survival_prob_cph","text":"","code":"survival_prob_cph(   x,   new_data,   times,   output = \"surv\",   interval = \"none\",   conf.int = 0.95,   ... )"},{"path":"https://censored.tidymodels.org/reference/survival_prob_cph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A wrapper for survival probabilities with cph models — survival_prob_cph","text":"x model coxph(). new_data Data prediction times vector integers prediction times. output One \"surv\", \"conf\", \"haz\". interval Add confidence interval survival probability? Options \"none\" \"confidence\". conf.int confidence level. ... Options pass survival::survfit()","code":""},{"path":"https://censored.tidymodels.org/reference/survival_prob_cph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A wrapper for survival probabilities with cph models — survival_prob_cph","text":"nested tibble","code":""},{"path":"https://censored.tidymodels.org/reference/survival_time_coxph.html","id":null,"dir":"Reference","previous_headings":"","what":"A wrapper for survival times with coxph models — survival_time_coxph","title":"A wrapper for survival times with coxph models — survival_time_coxph","text":"wrapper survival times coxph models","code":""},{"path":"https://censored.tidymodels.org/reference/survival_time_coxph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A wrapper for survival times with coxph models — survival_time_coxph","text":"","code":"survival_time_coxph(object, new_data)"},{"path":"https://censored.tidymodels.org/reference/survival_time_coxph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A wrapper for survival times with coxph models — survival_time_coxph","text":"object model coxph(). new_data Data prediction","code":""},{"path":"https://censored.tidymodels.org/reference/survival_time_coxph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A wrapper for survival times with coxph models — survival_time_coxph","text":"tibble","code":""},{"path":"https://censored.tidymodels.org/reference/time_to_million.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of days before a movie grosses $1M USD — time_to_million","title":"Number of days before a movie grosses $1M USD — time_to_million","text":"data somewhat biased random sample 551 movies released 2015 2018. Columns include","code":""},{"path":"https://censored.tidymodels.org/reference/time_to_million.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of days before a movie grosses $1M USD — time_to_million","text":"time_to_million tibble","code":""},{"path":"https://censored.tidymodels.org/reference/time_to_million.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Number of days before a movie grosses $1M USD — time_to_million","text":"title: character string movie title. time: number days movie earns million US dollars. event: binary value whether movie reached goal. 94% movies observed events. released: date field release date. distributor: factor name distributor. released_theaters: maximum number theaters movie played first two weeks release. year: release year. rated: factor Motion Picture Association film rating. runtime: length movie (minutes). set indicators columns movie genre (e.g. action, crime, etc.). set indicators language (e.g., english, hindi, etc.). set indicators countries movie released (e.g., uk, japan, etc.)","code":""}]
